diff --git a/node_modules/@uiw/react-codemirror/esm/useCodeMirror.js b/node_modules/@uiw/react-codemirror/esm/useCodeMirror.js
index eab503a..f39c420 100644
--- a/node_modules/@uiw/react-codemirror/esm/useCodeMirror.js
+++ b/node_modules/@uiw/react-codemirror/esm/useCodeMirror.js
@@ -108,6 +108,7 @@ export function useCodeMirror(props) {
       view.focus();
     }
   }, [autoFocus, view]);
+
   useEffect(() => {
     if (view) {
       view.dispatch({
@@ -115,21 +116,57 @@ export function useCodeMirror(props) {
       });
     }
     // eslint-disable-next-line react-hooks/exhaustive-deps
-  }, [theme, extensions, height, minHeight, maxHeight, width, minWidth, maxWidth, placeholderStr, editable, readOnly, defaultIndentWithTab, defaultBasicSetup, onChange, onUpdate]);
+  }, [theme, extensions, height, editable, maxHeight, width, minWidth, maxWidth, placeholderStr, editable, readOnly, defaultIndentWithTab, defaultBasicSetup, onChange, onUpdate]);
+
   useEffect(() => {
     if (value === undefined) {
       return;
     }
+
     var currentValue = view ? view.state.doc.toString() : '';
     if (view && value !== currentValue) {
+      console.log("DBG: a cursor jump would generally have occured at this point")
+      let start = 0;
+      const minLength = Math.min(value.length, currentValue.length);
+
+      while (start < minLength && value[start] === currentValue[start]) {
+        start++;
+      }
+
+      if (start === value.length && start === currentValue.length) {
+        return null;
+      }
+
+      let endCurrent = currentValue.length;
+      let endValue = value.length;
+      while (
+        endCurrent > start &&
+        endValue > start &&
+        value[endValue - 1] === currentValue[endCurrent - 1]
+      ) {
+        endCurrent--;
+        endValue--;
+      } 
+      const changesToDispatch = {
+        from: start,
+        to: endCurrent,
+        insert: value.slice(start, endValue),
+      }
+
       view.dispatch({
-        changes: {
-          from: 0,
-          to: currentValue.length,
-          insert: value || ''
-        },
-        annotations: [External.of(true)]
+        changes: changesToDispatch,
+        annotations: [External.of(true)],
       });
+      console.log("DBG: But I hope the patch worked")
+
+      // view.dispatch({
+      //   changes: {
+      //     from: 0,
+      //     to: currentValue.length,
+      //     insert: value || ''
+      //   },
+      //   annotations: [External.of(true)]
+      // });
     }
   }, [value, view]);
   return {
