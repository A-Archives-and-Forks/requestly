import { useGraphQLRecordStore } from "features/apiClient/hooks/useGraphQLRecordStore";
import { RQAPI } from "features/apiClient/types";
import GraphQLClientUrl from "./components/GraphQLClientUrl/GraphQLClientUrl";
import { useCallback, useContext, useEffect, useMemo, useState } from "react";
import useEnvironmentManager from "backend/environment/hooks/useEnvironmentManager";
import { OperationEditor } from "./components/GraphQLEditor/components/OperationEditor/OperationEditor";
import { VariablesEditor } from "./components/GraphQLEditor/components/VariablesEditor/VariablesEditor";
import { RQButton } from "lib/design-system-v2/components";
import { useApiClientContext } from "features/apiClient/contexts";
import { toast } from "utils/Toast";
import { HttpRequestExecutor } from "features/apiClient/helpers/httpRequestExecutor/HttpRequestExecutor";
import { useSelector } from "react-redux";
import { getAppMode } from "store/selectors";
import { AutogenerateStoreContext } from "features/apiClient/store/autogenerateContextProvider";
import { graphQLEntryToHttpEntryAdapter } from "./utils";

interface Props {
  notifyApiRequestFinished: (entry: RQAPI.GraphQLApiEntry) => void;
  onSaveCallback: (apiEntryDetails: RQAPI.GraphQLApiRecord) => void;
  isCreateMode: boolean;
}

export const GraphQLClientView = ({ notifyApiRequestFinished, onSaveCallback, isCreateMode }: Props) => {
  const [
    url,
    collectionId,
    response,
    updateRecordRequest,
    updateRecordResponse,
    getRecord,
  ] = useGraphQLRecordStore((state) => [
    state.record.data.request.url,
    state.record.collectionId,
    state.record.data.response,
    state.updateRecordRequest,
    state.updateRecordResponse,
    state.getRecord,
  ]);
  const { apiClientRecordsRepository, onSaveRecord, apiClientWorkloadManager } = useApiClientContext();
  const {
    getVariablesWithPrecedence,
    getCurrentEnvironmentVariables,
    getCollectionVariables,
    getGlobalVariables,
    getCurrentEnvironment,
    setVariables,
    setCollectionVariables,
    renderVariables,
    environmentSyncRepository,
  } = useEnvironmentManager();

  const appMode = useSelector(getAppMode);

  const [isSaving, setIsSaving] = useState(false);
  const [isSending, setIsSending] = useState(false);
  const [httpRequestExecutor, setHttpRequestExecutor] = useState<HttpRequestExecutor | null>(null);
  const autoGeneratedStore = useContext(AutogenerateStoreContext);

  const currentEnvironmentVariables = useMemo(() => getVariablesWithPrecedence(collectionId), [
    collectionId,
    getVariablesWithPrecedence,
  ]);

  const handleUrlChange = useCallback(
    (value: string) => {
      updateRecordRequest({
        url: value,
      });
    },
    [updateRecordRequest]
  );

  // TEMP IMPLEMENTATION
  const handleSave = useCallback(async () => {
    const apiRecord = getRecord();

    const recordToSave: Partial<RQAPI.ApiRecord> = {
      type: RQAPI.RecordType.API,
      data: {
        ...apiRecord.data,
      },
    };
    if (isCreateMode) {
      const requestId = apiClientRecordsRepository.generateApiRecordId();
      recordToSave.id = requestId;
    }

    if (apiRecord?.id) {
      recordToSave.id = apiRecord?.id;
    }
    setIsSaving(true);
    const result = isCreateMode
      ? await apiClientRecordsRepository.createRecordWithId(recordToSave, recordToSave.id)
      : await apiClientRecordsRepository.updateRecord(recordToSave, recordToSave.id);

    if (result.success && result.data.type === RQAPI.RecordType.API) {
      onSaveRecord({ ...(apiRecord ?? {}), ...result.data, data: { ...result.data.data, ...recordToSave.data } });
      onSaveCallback(result.data as RQAPI.GraphQLApiRecord);
      toast.success("Request saved!");
    } else {
      toast.error("Something went wrong while saving the request");
    }
    setIsSaving(false);
  }, [onSaveCallback, getRecord, isCreateMode, apiClientRecordsRepository, onSaveRecord]);

  const handleUrlInputEnterPressed = useCallback((evt: KeyboardEvent) => {
    (evt.target as HTMLInputElement).blur();
  }, []);

  const handleSend = useCallback(async () => {
    const record = getRecord();

    const graphQLRequestEntry = record.data as RQAPI.GraphQLApiEntry;
    const httpRequestEntry = graphQLEntryToHttpEntryAdapter(graphQLRequestEntry);

    httpRequestExecutor.updateEntryDetails({
      entry: httpRequestEntry,
      recordId: record.id,
      collectionId: record.collectionId,
    });
    try {
      setIsSending(true);
      const apiClientExecutionResult = await httpRequestExecutor.execute();

      const { executedEntry } = apiClientExecutionResult;
      const entryWithResponse: RQAPI.GraphQLApiEntry = {
        ...graphQLRequestEntry,
        response: executedEntry.response as RQAPI.GraphQLResponse,
        testResults: executedEntry.testResults,
      };
      console.log({ entryWithResponse });
      updateRecordResponse(entryWithResponse.response);

      toast.success("Request executed successfully");
    } catch (error) {
      toast.error("Something went wrong while sending the request");
    } finally {
      setIsSending(false);
    }
  }, [httpRequestExecutor, getRecord, updateRecordResponse]);

  const handleUpdatesFromExecutionWorker = useCallback(
    async (state: any) => {
      for (const key in state) {
        if (key === "environment") {
          const currentEnvironment = getCurrentEnvironment() as {
            currentEnvironmentName?: string;
            currentEnvironmentId?: string;
          };
          if (currentEnvironment.currentEnvironmentId) {
            await setVariables(currentEnvironment.currentEnvironmentId, state[key]);
          }
        }
        if (key === "global") {
          const globalEnvId = environmentSyncRepository.getGlobalEnvironmentId();
          await setVariables(globalEnvId, state[key]);
        }
        if (key === "collectionVariables") {
          await setCollectionVariables(state[key], collectionId);
        }
      }
    },
    [getCurrentEnvironment, setVariables, setCollectionVariables, collectionId, environmentSyncRepository]
  );

  useEffect(() => {
    if (httpRequestExecutor) {
      httpRequestExecutor.updateInternalFunctions({
        getCollectionVariables,
        getEnvironmentVariables: getCurrentEnvironmentVariables,
        getGlobalVariables,
        postScriptExecutionCallback: handleUpdatesFromExecutionWorker,
        renderVariables,
      });
    }
  }, [
    getCurrentEnvironmentVariables,
    getCollectionVariables,
    getGlobalVariables,
    handleUpdatesFromExecutionWorker,
    httpRequestExecutor,
    renderVariables,
  ]);

  useEffect(() => {
    if (!httpRequestExecutor) {
      setHttpRequestExecutor(new HttpRequestExecutor(appMode, apiClientWorkloadManager, autoGeneratedStore));
    }
  }, [apiClientWorkloadManager, appMode, httpRequestExecutor, autoGeneratedStore]);

  return (
    <div className="api-client-view">
      <GraphQLClientUrl
        url={url}
        currentEnvironmentVariables={currentEnvironmentVariables}
        onEnterPress={handleUrlInputEnterPressed}
        onUrlChange={handleUrlChange}
      />
      <OperationEditor />
      <VariablesEditor />
      <RQButton type="primary" onClick={handleSend} loading={isSending}>
        Send
      </RQButton>
      <RQButton loading={isSaving} onClick={handleSave}>
        Save
      </RQButton>
      <pre>{JSON.stringify(response?.body, null, 2)}</pre>
    </div>
  );
};
