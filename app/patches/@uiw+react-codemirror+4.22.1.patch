diff --git a/node_modules/@uiw/react-codemirror/esm/useCodeMirror.js b/node_modules/@uiw/react-codemirror/esm/useCodeMirror.js
index eab503a..ee6fa2a 100644
--- a/node_modules/@uiw/react-codemirror/esm/useCodeMirror.js
+++ b/node_modules/@uiw/react-codemirror/esm/useCodeMirror.js
@@ -5,6 +5,52 @@ import { getDefaultExtensions } from './getDefaultExtensions';
 import { getStatistics } from './utils';
 var External = Annotation.define();
 var emptyExtensions = [];
+var TYPING_TIMEOUT = 200; //ms
+var editorInstances = {};
+var instanceCounter = 0;
+
+function getInstanceState(instanceId) {
+  if (!editorInstances[instanceId]) {
+    editorInstances[instanceId] = {
+      userIsTyping: false,
+      typingTimer: null,
+      pendingValueUpdate: null,
+      lastTypingTime: 0
+    };
+  }
+  return editorInstances[instanceId];
+}
+
+function cleanupInstance(instanceId) {
+  var state = editorInstances[instanceId];
+  if (state) {
+    if (state.typingTimer) {
+      clearTimeout(state.typingTimer);
+    }
+    delete editorInstances[instanceId];
+  }
+}
+
+function handleTypingSessionEnd(instanceState) {
+  instanceState.userIsTyping = false;
+  
+  if (instanceState.pendingValueUpdate) {
+    if (instanceState.pendingValueUpdate.timestamp < instanceState.lastTypingTime) {
+      instanceState.pendingValueUpdate = null;
+      return;
+    }
+    
+    var currentVal = instanceState.pendingValueUpdate.view.state.doc.toString();
+    if (instanceState.pendingValueUpdate.value !== currentVal) {
+      console.log("DG-42: CURSOR JUMP RISK - Executing view.dispatch that replaces entire content");
+      instanceState.pendingValueUpdate.view.dispatch({
+        changes: { from: 0, to: currentVal.length, insert: instanceState.pendingValueUpdate.value || '' },
+        annotations: [External.of(true)],
+      });
+    }
+    instanceState.pendingValueUpdate = null;
+  }
+}
 export function useCodeMirror(props) {
   var {
     value,
@@ -33,6 +79,8 @@ export function useCodeMirror(props) {
   var [container, setContainer] = useState();
   var [view, setView] = useState();
   var [state, setState] = useState();
+  
+  var [instanceId] = useState('rq-cm-instance-' + (++instanceCounter));
   var defaultThemeOption = EditorView.theme({
     '&': {
       height,
@@ -48,11 +96,27 @@ export function useCodeMirror(props) {
   });
   var updateListener = EditorView.updateListener.of(vu => {
     if (vu.docChanged && typeof onChange === 'function' &&
-    // Fix echoing of the remote changes:
-    // If transaction is market as remote we don't have to call `onChange` handler again
     !vu.transactions.some(tr => tr.annotation(External))) {
       var doc = vu.state.doc;
       var _value = doc.toString();
+      
+      var instanceState = getInstanceState(instanceId);
+      
+      instanceState.userIsTyping = true;
+      instanceState.lastTypingTime = Date.now();
+      
+      if (instanceState.pendingValueUpdate) {
+        instanceState.pendingValueUpdate = null;
+      }
+      
+      if (instanceState.typingTimer) {
+        clearTimeout(instanceState.typingTimer);
+      }
+      
+      instanceState.typingTimer = setTimeout(() => {
+        handleTypingSessionEnd(instanceState);
+      }, TYPING_TIMEOUT);
+      
       onChange(_value, vu);
     }
     onStatistics && onStatistics(getStatistics(vu));
@@ -108,6 +172,7 @@ export function useCodeMirror(props) {
       view.focus();
     }
   }, [autoFocus, view]);
+
   useEffect(() => {
     if (view) {
       view.dispatch({
@@ -116,22 +181,35 @@ export function useCodeMirror(props) {
     }
     // eslint-disable-next-line react-hooks/exhaustive-deps
   }, [theme, extensions, height, minHeight, maxHeight, width, minWidth, maxWidth, placeholderStr, editable, readOnly, defaultIndentWithTab, defaultBasicSetup, onChange, onUpdate]);
+
   useEffect(() => {
     if (value === undefined) {
       return;
     }
+    
     var currentValue = view ? view.state.doc.toString() : '';
     if (view && value !== currentValue) {
+      var instanceState = getInstanceState(instanceId);
+      
+      if (instanceState.userIsTyping) {
+        instanceState.pendingValueUpdate = { value: value, view: view, timestamp: Date.now() };
+        return;
+      }
+      
+      console.log("DG-41: CURSOR JUMP RISK - Executing view.dispatch that replaces entire content");
       view.dispatch({
-        changes: {
-          from: 0,
-          to: currentValue.length,
-          insert: value || ''
-        },
-        annotations: [External.of(true)]
+        changes: { from: 0, to: currentValue.length, insert: value || '' },
+        annotations: [External.of(true)],
       });
     }
-  }, [value, view]);
+  }, [value, view, instanceId]);
+  
+  useEffect(() => {
+    return () => {
+      cleanupInstance(instanceId);
+    };
+  }, [instanceId]);
+
   return {
     state,
     setState,
