import React, { useCallback, useMemo } from "react";
import { KeyValuePair, RQAPI } from "features/apiClient/types";
import { KeyValueTable } from "../../../KeyValueTable/KeyValueTable";
import { useAutogenerateStore } from "features/apiClient/hooks/useAutogenerateStore";
import { AutoGeneratedTable } from "../../../KeyValueTable/AutoGeneratedTable";
import { useApiRecordState } from "features/apiClient/hooks/useApiRecordState.hook";
import { useScopedVariables } from "features/apiClient/helpers/variableResolver/variable-resolver";

interface HeadersTableProps {
  headers: KeyValuePair[];
  recordId: string;
  setRequestEntry: (updaterFn: (prev: RQAPI.Entry) => RQAPI.Entry) => void;
}

function Data(props: {
  recordId: string;
  headers: KeyValuePair[];
  handleHeadersChange: (updatedPairs: KeyValuePair[]) => void;
}) {
  const { version } = useApiRecordState(props.recordId);
  const scopedVariables = useScopedVariables(props.recordId, version);
  return (
    <KeyValueTable
      data={props.headers}
      variables={scopedVariables}
      onChange={props.handleHeadersChange}
      checkInvalidCharacter={true}
    />
  );
}

export const HeadersTable: React.FC<HeadersTableProps> = ({ headers, recordId, setRequestEntry }) => {
  const [headerVersion, getAllHeaders] = useAutogenerateStore((s) => [s.headerVersion, s.getAllHeaders]);

  const autogeneratedHeaders = useMemo(() => getAllHeaders(), [headerVersion, getAllHeaders]);

  const handleHeadersChange = useCallback(
    (updatedHeaders: KeyValuePair[]) => {
      setRequestEntry((prev) => ({
        ...prev,
        request: {
          ...prev.request,
          headers: updatedHeaders,
        },
      }));
    },
    [setRequestEntry]
  );

  return (
    <div>
      {autogeneratedHeaders.length > 0 && <AutoGeneratedTable data={autogeneratedHeaders} type="headers" />}
      <Data headers={headers} recordId={recordId} handleHeadersChange={handleHeadersChange} />
    </div>
  );
};
